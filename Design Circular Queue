class MyCircularQueue {
public:
int *arr;
int front;
int rear;
int size;
    MyCircularQueue(int k) {
        size=k;
        arr=new int[size];
        front=-1;
        rear=-1;
    }
    
    bool enQueue(int value) {
        //Check whether Queue is full or not
        if((rear+1)%size==front){
            return false;
        }
        //empty case
       if(front==-1){
        front=0;
        rear=0;
        arr[rear]=value;
       }
       //circular nature 
       else if(rear==size-1 && front!=0){
        rear=0;
        arr[rear]=value;
       }
       //normal flow
       else{
        rear++;
        arr[rear]=value;
       }
      return true;
    }
    
    bool deQueue() {
    //Underflow 
    if(front==-1){
        return false;
    }
    //Single element
    if(front==rear){
        front=-1;
        rear=-1;
    }
    else if(front==size-1){
        front=0;
    }
    else{
        front++;
    }
    return true;
    }
    
    int Front() {
        if(front==-1 && rear==-1){
            return -1;
        }
        return arr[front];
    }
    
    int Rear() {
         if(front==-1 && rear==-1){
            return -1;
        }
        return arr[rear];
    }
    
    bool isEmpty() {
        if(front==-1 && rear==-1){
            return true;
        }
        return false;
    }
    
    bool isFull() {
        if((rear+1)%size==front){
            return true;
        }
        return false;
    }
};
