// Problem: Median of Two Sorted Arrays
// This function merges two sorted arrays and returns the median of the combined sorted array.
// Time Complexity: O((m + n) log(m + n)) due to sorting
// Space Complexity: O(1) extra space (excluding input vectors and sort overhead)

double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
    // Step 1: Merge nums2 into nums1
    for (int i = 0; i < nums2.size(); i++) {
        nums1.push_back(nums2[i]);
    }

    // Step 2: Sort the combined array
    sort(nums1.begin(), nums1.end());

    // Step 3: Calculate the median
    int n = nums1.size();
    
    // If odd number of elements, return the middle one
    if (n % 2 == 1) {
        int idx = n / 2;
        return nums1[idx];
    }

    // If even number of elements, return the average of two middle elements
    double value = nums1[n / 2] + nums1[n / 2 - 1];
    return value / 2;
}
