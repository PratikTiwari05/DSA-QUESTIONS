/*
 * Title     : Majority Element (Boyer-Moore Voting Algorithm)
 * Problem   : Given an array of size n, find the majority element (element that appears more than ⌊n / 2⌋ times)
 * Time Complexity : O(n)
 * Space Complexity: O(1)
 * Author    : Pratik Tiwari
 * Language  : C++
 */

class Solution {
public:
    int majorityElement(vector<int>& arr) {
        int count = 0;
        int majority;

        // Phase 1: Find a candidate
        for (int i = 0; i < arr.size(); i++) {
            if (count == 0) {
                majority = arr[i];
                count = 1;
            } else if (arr[i] == majority) {
                count++;
            } else {
                count--;
            }
        }

        // Phase 2: Verify candidate is majority
        count = 0;
        for (int j = 0; j < arr.size(); j++) {
            if (arr[j] == majority) {
                count++;
            }
        }

        if (count > arr.size() / 2) {
            return majority;
        }

        return -1; // No majority element exists
    }
};
