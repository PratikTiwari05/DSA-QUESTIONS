class MyCircularDeque {
public:
   int* arr;
   int front;
   int rear;
   int size;
    MyCircularDeque(int k) {
        size=k;
        arr=new int [size];
         front=-1;
         rear=-1;
    }
    
    bool insertFront(int value) {
        //overflow
        //empty case
        //circular nature
        //normal flow
        if((rear+1)%size==front){
            return false;
        }
        if(front==-1){
            front=0;
            rear=0;
            arr[front]=value;
        }
        else if(front==0){
            front=size-1;
            arr[front]=value;
        }
        else{
            front--;
            arr[front]=value;
        }
        return true;
    }
    
    bool insertLast(int value) {
        if((rear+1)%size==front){
            return false;
        }
        if(front==-1){
            front=0;
            rear=0;
            arr[rear]=value;
        }
        else if(rear==size-1 && front!=0){
          rear=0;
          arr[rear]=value;
        }
        else{
            rear++;
            arr[rear]=value;

        }
        return true;
    }
    
    bool deleteFront() {
        //underflow
        //single element
        //circular nature
        //normal flow
        if(front==-1 && rear==-1){
            return false;
        }
        if(front ==rear){
            front=-1;
            rear=-1;
        }
        else if(front==size-1){
            front=0;
        }
        else{
            front++;
        }
        return true;
    }
    
    bool deleteLast() {
         if(front==-1 && rear==-1){
            return false;
        }
        if(front ==rear){
            front=-1;
            rear=-1;
        }
        else if(rear==0){
            rear=size-1;
        }
        else{
            rear--;
        }
        return true;
    }
    
    int getFront() {
        if(front==-1 && rear==-1){
            return -1;
        }
        return arr[front];
    }
    
    int getRear() {
         if(front==-1 && rear==-1){
            return -1;
        }
        return arr[rear];
    }
    
    bool isEmpty() {
        if(front==-1 && rear==-1){
            return true;
        }
        return false;
    }
    
    bool isFull() {
        if((rear+1)%size==front){
            return true;
        }
        return false;
    }
};
